using Microsoft.AspNetCore.Mvc;
using UserCertificateAutoEnrollment.BL.Session;
using NLog.Common;
using UserCertificateAutoEnrollment.BL.KeyStore;
using UserCertificateAutoEnrollment.BL.Common.Contracts;

namespace UCAE_KeyStoreSelfHostedApi.Controllers
{

    [ApiController]
    [Route("[controller]")]
    public class AuthController : Controller
    {
        private static NLog.Logger _logger = NLog.LogManager.GetCurrentClassLogger();
        private readonly ISessionProvider m_SessionProvider;
        private readonly IKeyStoreFactory m_KeyStoreFactory;
        private readonly IHttpClient m_HttpClient;

        public AuthController(ISessionProvider sessionProvider, IKeyStoreFactory keyStoreFactory, IHttpClient httpClient)
        {
            m_SessionProvider = sessionProvider;
            m_KeyStoreFactory = keyStoreFactory;
            m_HttpClient = httpClient;            
        }

        [HttpGet]
        [Route("CreateSession")]
        public async Task<IActionResult> CreateSessionAsync(string nonceValue)
        {
            _logger.Trace($"Creating new session with provided nonceValue: {nonceValue}");
            _logger.Info($"Creating new session");

            //validate nonceValue <-- maybe limit chars to a specific amount
            if (string.IsNullOrEmpty(nonceValue))
            {
                _logger.Warn("Could not create session nonceValue format is incorect");
                _logger.Trace($"Could not create session nonceValue format is incorect. Value provided {nonceValue}");

                throw new ArgumentException($"'{nameof(nonceValue)}' format is not correct", nameof(nonceValue));

            }

            var session = await m_SessionProvider.CreateSession(nonceValue);

            _logger.Info("Session created successfully.");
            _logger.Trace($"Session key generated by the app: {session.SessionKey}");

            return Ok(session);
        }

        [HttpPost]
        [Route("ValidateSession")]
        public IActionResult ValidateSession([FromBody] byte[] sessionKey)
        {
            _logger.Trace($"Validation session key: {sessionKey}");
            _logger.Info($"Validate session started");

            if (sessionKey is null)
            {
                throw new ArgumentNullException(nameof(sessionKey));
            }


            var isValid = m_SessionProvider.ValidateSession(sessionKey);
            _logger.Info($"Validate session completed");

            return Ok(isValid);
        }
    }
}

